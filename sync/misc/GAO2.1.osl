/*
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
 */
 
 /* Simple Ambient Occlusion
  * Version 2.1 : added Oversampling Loop
  * 
  * by François GASTALDO
  *
  * contact me at : pressf9@free.fr
  *
  * blog (3D, shaders, photos and more) : http://vadrouillegraphique.blogspot.fr/
  *
  * Small Documentation :
	This shader is a general purpose Ambient Occlusion
	
	You can use it for color or for closure, or for both at same time.
	
	if you connect use just the ' ColorIn ' or just the ' closureIn ' inputs
	and connect nothing to 'ColorHit' or 'closureHit'. then Occlusion will be black.
	
	AO Angle is in RADIANS,  1.0 = 180° AO search 
  
	Maxdistance limit distance of occluding objects.
	
	Oversampling : finer AO, but render time increment linearly.
	
	AOgamma give a linear effect (1.0) or a more 'lighting' effect (2.2, for example)
  
  * This shader is made for educationnal purpose only. Use it in production at your own risk.
  *
  * Closures are for Blender/Cycles. They could need adaptation for your renderer.
  *
  * If you use this shader, please credit it and me. Thank you.
  *
  *  Enjoy !
  *
  * François Gastaldo
  */
 
//#include "stdosl.h"
//#include "node_fresnel.h"
//#include "oslutil.h"

shader GAO2(
    color ColorIn = color(1.0,1.0,1.0),
    color ColorHit = color(0.0 , 0.0 , 0.0 ),
    closure color closureIn = ColorIn * emission() ,
    closure color closureHit = ColorHit * emission() ,
	int mode = 0 ,
	int InvertEffect = 0 ,
    float AO_AngleDeg = 85 ,
    float maxDistance = 25.0 ,
	float OverSampling = 2.0 ,
	float AOgamma = 2.2 ,
	vector Normalbump = vector (0.0 , 0.0 , 0.0),
    output color CoulOut = color(1.0,0.0,0.0) , 
    output closure color closureOut = closureIn
    )
{
    // Disable diffuse emission from this material
    
    int RTdiffuse = raytype ("diffuse") ;
    
    if (  RTdiffuse ) 
	{ 
        closure color NullClosure = 0.0 ;
        CoulOut = 0.0 ;
        closureOut =   NullClosure   ; 
    } else 
	{
    
		float MixOut = 0.0 ; 
		float mixage = 0.0 ;
		
		// Degrees to Radian conversion
		float AO_Angle = radians(AO_AngleDeg);
		
		// NEW VERSION of Loop
		// Loop init
	    int Loopi = 0 ; 
	    float LoopShift = 0.0007 ;

	    for( Loopi ; Loopi < OverSampling ; Loopi++  )
	    {
		   
	    	LoopShift += 0.001 ;
			
			
			// compute  vector to trace Ray = random * N + subtle variations...
			vector VectorAO = N + Normalbump + ( LoopShift * noise("perlin", P*(10000.0+Loopi) ) ) ;
			if ( AO_Angle != 0.0 ) 
			{
				vector bruitvector = AO_Angle * noise("perlin", VectorAO*(10000.0+Loopi) );
				VectorAO +=  bruitvector ;
			}
			 
						
			// init for trace
			float Dist = 1.0 ;
			vector DirTrace = VectorAO ;
			float MaxDistTrace = maxDistance ;
			
			
			
			if ( mode == 2 )
			{ 
				// Both, so we have to shoot 2 rays !
				
				float DistDirect, DistInv ;
				// Trace Direct Ray
				int DoTrace = trace (P, DirTrace  , "maxdist" , MaxDistTrace ) ;
				
				if ( DoTrace ) 
				{
						// If hit something
						// Get the distance of the hit. Currently doesn't work with VRay 3.0.
						int HitTraceDirect = getmessage ("trace", "hitdist" ,  DistDirect ) ;
				} else 
				{
				   // else, return maxDistance distance
					DistDirect = maxDistance ;
				}
				
				// Trace Invert Ray
				DoTrace = trace (P, -DirTrace  , "maxdist" , MaxDistTrace ) ;
				
				if ( DoTrace ) 
				{
						// If hit something
						// Get the distance of the hit. Currently doesn't work with VRay 3.0.
						int HitTraceDirect = getmessage ("trace", "hitdist" ,  DistInv ) ;
				} else 
				{
				   // else, return maxDistance distance
					DistInv = maxDistance ;
				}
				
				// Take the smaller distance
				Dist = min( DistInv , DistDirect ) ;
				
				mixage = clamp ( (Dist / maxDistance) , 0.0 , 1.0 ) ;
					
				// Add 1/x of loop contribution
				MixOut += mixage * (1.0/OverSampling)  ;
				
			
			} else
			{
				
				if ( mode == 1 )
				{ 
					DirTrace = -DirTrace ;
				}
				
				// Trace one Ray
				int DoTrace = trace (P, DirTrace  , "maxdist" , MaxDistTrace ) ;
				
				
				if ( DoTrace ) 
				{
					// If hit something

					// Get the distance of the hit. Currently doesn't work with VRay 3.0.
					int HitTrace = getmessage ("trace", "hitdist" ,  Dist ) ;
					
					mixage = clamp ( (Dist / maxDistance) , 0.0 , 1.0 ) ;
					
					// Add 1/x of loop contribution
					MixOut += mixage * (1.0/OverSampling)  ;
					
				   
				} else 
				{
				   // else, return white
					MixOut += 1.0 * (1.0/OverSampling) ;
					
				}
			}
			
		}
		
				
		// Outputs
		MixOut = pow( MixOut , 1/AOgamma ) ;
		
		// Inverted Effect
		if ( InvertEffect == 1 )
		{
			MixOut = 1.0 - MixOut ;
		}
		
		CoulOut = mix  ( ColorHit , ColorIn , MixOut ) ;
		closureOut = (closureIn * MixOut)  + closureHit * (1.0 - MixOut ) ;
		
	}
 // END NEW VERSION
	
    
}
    
